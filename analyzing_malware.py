import pefile
import lief
import capstone
import os 

malware_path = "/Users/notion/Downloads/npp.8.5.portable.x64/notepad++.exe"

pe = pefile.PE(malware_path)
print("Target Machine: ",pe.FILE_HEADER.Machine) # prints the target machine
print("Timestamp: ",pe.FILE_HEADER.TimeDateStamp) # prints the timestamp
print("Characteristic: ",pe.FILE_HEADER.Characteristics) # prints the characteristics

# Check if the malware has a debug section
if hasattr(pe, 'DIRECTORY_ENTRY_DEBUG'):
    print("Malware has a debug section. Possible packer used.")

# Check if the malware has any imported functions from kernel32.dll
for entry in pe.DIRECTORY_ENTRY_IMPORT:
    if entry.dll.lower() == 'kernel32.dll':
        for imp in entry.imports:
            if imp.name.lower() == 'virtualallocex':
                print("Malware allocates memory remotely.")


# Open the PE file
pe = pefile.PE(malware_path)

# Print the ImageBase address
print("ImageBase: 0x{0:08x}".format(pe.OPTIONAL_HEADER.ImageBase))

# Print the number of sections
print("Number of sections: {0}".format(pe.FILE_HEADER.NumberOfSections))

# Print the section names
print("Section names:")
for section in pe.sections:
    print("\\t{0}".format(section.Name.decode().rstrip('\\x00')))


def analyze_malware(malware_path):
    with open(file_path, 'rb') as f:
        data = f.read()
    md = capstone.Cs(capstone.CS_ARCH_X86, capstone.CS_MODE_64)
    for i in md.disasm(data, 0):
        print("0x%x:\\t%s\\t%s" %(i.address, i.mnemonic, i.op_str))

